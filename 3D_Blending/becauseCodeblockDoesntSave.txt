#include <iostream>
#include <windows.h>
#include <string>
#include <fstream>
#include <GL/glut.h>
#include <GL/glui.h>
#include <vector>
#include <algorithm>
#include <math.h>
#include "vertex.h"

using namespace std;

enum GLUI_COMP_ID { SUBWIN_T_FACE_CB, //subwindow top checkbox
                    SUBWIN_T_RESET_BTN,
                    SUBWIN_B_FACE_CB, //subwindow top checkbox
                    SUBWIN_B_RESET_BTN,
                    SUBWIN_R_FACE_CB, //subwindow top checkbox
                    MODEL_PAIR_LB //listbox to swap model pairs
                    };

int subwinT_cbState = 0; //subwindow top checkbox state
int subwinB_cbState = 0;
int subwinR_cbState = 0;
int modelPair_lbID = 0; //mode pair listbox id

GLUI *gluiL, *gluiT, *gluiB, *gluiR;

string fileName_t, surfVert_t, face_t, skelVert_t, skelEdge_t;
string fileName_b, surfVert_b, face_b, skelVert_b, skelEdge_b;

GLUI_StaticText *fileNameT_txt,*surfVertT_txt,*faceT_txt,*skelVertT_txt,*skelEdgeT_txt;
GLUI_StaticText *fileNameB_txt,*surfVertB_txt,*faceB_txt,*skelVertB_txt,*skelEdgeB_txt;


int WindowWidth = 1280, WindowHeight = 720;

double posX_t = 0.0, posY_t = 0.0, posZ_t = 0.0, posInc_t = 0.1, angleInc_t = 2.0;
double rotateX_t = 0.0, rotateY_t = 0.0, rotateZ_t = 0.0;
static double scaleX_t = 1.0, scaleY_t = 1.0, scaleZ_t = 1.0;
int option_t = 0, axisornot_t = 0;
bool mousePanMode_t=false, mouseZoomMode_t=false, mouseRotationMode_t=false;
int mouseX_t = 0, mouseY_t = 0;
float eyeX_t=0, eyeY_t=0, eyeZ_t=0, focusX_t=0, focusY_t=0, focusZ_t=0, upX_t=0, upY_t=1, upZ_t=0;

double posX_b = 0.0, posY_b = 0.0, posZ_b = 0.0, posInc_b = 0.1, angleInc_b = 2.0;
double rotateX_b = 0.0, rotateY_b = 0.0, rotateZ_b = 0.0;
static double scaleX_b = 1.0, scaleY_b = 1.0, scaleZ_b = 1.0;
int option_b = 0, axisornot_b = 0;
bool mousePanMode_b=false, mouseZoomMode_b=false, mouseRotationMode_b=false;
int mouseX_b = 0, mouseY_b = 0;
float eyeX_b=0, eyeY_b=0, eyeZ_b=0, focusX_b=0, focusY_b=0, focusZ_b=0, upX_b=0, upY_b=1, upZ_b=0;

/*//////////////////////////////////////
double posX = 0.0, posY = 0.0, posZ = 0.0, posInc = 0.1, angleInc = 2.0;
double rotateX = 0.0, rotateY = 0.0, rotateZ = 0.0;
static double scaleX = 1.0, scaleY = 1.0, scaleZ = 1.0;
int option = 0, axisornot = 0;
bool mousePanMode=false, mouseZoomMode=false, mouseRotationMode=false;
int mouseX = 0, mouseY = 0;
float eyeX=0, eyeY=0, eyeZ=0, focusX=0, focusY=0, focusZ=0, upX=0, upY=1, upZ=0;
//*//////////////////////////////////////

int main_window, subwinL, subwinT, subwinB, subwinR;

string pathPoints = "data/hand.ply";
string pathSkeleton = "data/hand.skel";
string name = "hand";

GLUI_EditText   *edittext;

vertex model1, model2;

float transX_t=0, transY_t=0, transZ_t=0, transparent_t=1.0;
bool displayVertices_t = true, displayFaces_t = false;

float transX_b=0, transY_b=0, transZ_b=0, transparent_b=1.0;
bool displayVertices_b = true, displayFaces_b = false;

//float transX=0, transY=0, transZ=0, transparent=1.0;
//bool displayVertices = true, displayFaces = false;




void gluiComponentCallback(int);

void refreshDisplay()
{
    //glFlush();
    glutSwapBuffers();
    glutPostRedisplay();
}

void InitTransparent()
{
    glEnable(GL_BLEND);
    glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);
    glShadeModel(GL_SMOOTH);
    glClearColor(0,0,0,0);
}

void subwinT_display(void)
{
    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

    glPushMatrix();
    GLfloat amb_light[] = { 0.5f,0.5f,0.5f,1.0f };
    GLfloat diffuse[] = { 1.0f, 1.0f, 1.0f, 1.0f };
    //GLfloat specular[] = { 0.1, 0.1, 0.1, 0.1};
    GLfloat lightpos[] = {0.f,0.f,200.0f,1.0f};

    glLightfv( GL_LIGHT0, GL_AMBIENT, amb_light );
    glLightfv( GL_LIGHT0, GL_DIFFUSE, diffuse );
    //glLightfv( GL_LIGHT0, GL_SPECULAR, specular );
    glLightfv(GL_LIGHT0, GL_POSITION, lightpos);
    glEnable( GL_LIGHT0 );
    glEnable( GL_COLOR_MATERIAL );
    glShadeModel( GL_SMOOTH );
    glLightModeli( GL_LIGHT_MODEL_TWO_SIDE, GL_FALSE );
    glDepthFunc( GL_LEQUAL );
    glEnable( GL_DEPTH_TEST );
    glEnable(GL_LIGHTING);
    glPopMatrix();

    glPushMatrix();

    glTranslatef(posX_t, posY_t, posZ_t);
    glRotatef(rotateX_t, 1.0f, 0.0f, 0.0f);
    glRotatef(rotateY_t, 0.0f, 1.0f, 0.0f);
    glRotatef(rotateZ_t, 0.0f, 0.0f, 1.0f);
    glScalef(scaleX_t, scaleY_t, scaleZ_t);

    //glPushMatrix();
    //*//
    if(axisornot_t%2 == 1)
       model1.DrawAxis();  //Press

    if(displayVertices_t)// || subwinT_cbState == 0)
        model1.DisplayVertices();
    if(displayFaces_t)// || subwinT_cbState == 1)
        model1.DisplayFaces(transparent_t);
    model1.DisplaySkel();
    //*///

    glPopMatrix();
    refreshDisplay();
}

void subwinB_display(void)
{
    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

    glPushMatrix();
    GLfloat amb_light[] = { 0.5f,0.5f,0.5f,1.0f };
    GLfloat diffuse[] = { 1.0f, 1.0f, 1.0f, 1.0f };
    //GLfloat specular[] = { 0.1, 0.1, 0.1, 0.1};
    GLfloat lightpos[] = {0.f,0.f,200.0f,1.0f};

    glLightfv( GL_LIGHT0, GL_AMBIENT, amb_light );
    glLightfv( GL_LIGHT0, GL_DIFFUSE, diffuse );
    //glLightfv( GL_LIGHT0, GL_SPECULAR, specular );
    glLightfv(GL_LIGHT0, GL_POSITION, lightpos);
    glEnable( GL_LIGHT0 );
    glEnable( GL_COLOR_MATERIAL );
    glShadeModel( GL_SMOOTH );
    glLightModeli( GL_LIGHT_MODEL_TWO_SIDE, GL_FALSE );
    glDepthFunc( GL_LEQUAL );
    glEnable( GL_DEPTH_TEST );
    glEnable(GL_LIGHTING);
    glPopMatrix();

    glPushMatrix();

    glTranslatef(posX_b, posY_b, posZ_b);
    glRotatef(rotateX_b, 1.0f, 0.0f, 0.0f);
    glRotatef(rotateY_b, 0.0f, 1.0f, 0.0f);
    glRotatef(rotateZ_b, 0.0f, 0.0f, 1.0f);
    glScalef(scaleX_b, scaleY_b, scaleZ_b);

    //glPushMatrix();
    //*//
    if(axisornot_b%2 == 1)
       model2.DrawAxis();  //Press

    if(displayVertices_b)
        model2.DisplayVertices();
    if(displayFaces_b)
        model2.DisplayFaces(transparent_b);
    model2.DisplaySkel();
    //*///

    glPopMatrix();
    //glFlush();
    //glutSwapBuffers();
    //glutPostRedisplay();
    refreshDisplay();

}

void viewing_t()
{
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    gluPerspective(45, 1, 0.1, 500.0);

    glMatrixMode(GL_MODELVIEW);
    glLoadIdentity();
    gluLookAt(eyeX_t, eyeY_t, eyeZ_t, focusX_t, focusY_t, focusZ_t, upX_t, upY_t, upZ_t);
}
void viewing_b()
{
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    gluPerspective(45, 1, 0.1, 500.0);

    glMatrixMode(GL_MODELVIEW);
    glLoadIdentity();
    gluLookAt(eyeX_b, eyeY_b, eyeZ_b, focusX_b, focusY_b, focusZ_b, upX_b, upY_b, upZ_b);
}

        void resetView_t()
        {
            rotateX_t = 0.0, rotateY_t = 0.0, rotateZ_t = 0.0;
            posX_t = 0.0, posY_t = 0.0, posZ_t = 0.0;
            scaleX_t = 1.0, scaleY_t = 1.0, scaleZ_t = 1.0;
            glutSetWindow(subwinT);
            refreshDisplay();
        }
        void resetView_b()
        {
            rotateX_b = 0.0, rotateY_b = 0.0, rotateZ_b = 0.0;
            posX_b = 0.0, posY_b = 0.0, posZ_b = 0.0;
            scaleX_b = 1.0, scaleY_b = 1.0, scaleZ_b = 1.0;
            glutSetWindow(subwinB);
            refreshDisplay();
        }

void subwinT_special(int key, int x, int y)
{//*//
    switch (key)
    {
    case GLUT_KEY_DOWN  :
        rotateX_t += angleInc_t;
        break;
    case GLUT_KEY_UP    :
        rotateX_t -= angleInc_t;
        break;
    case GLUT_KEY_RIGHT :
        rotateY_t += angleInc_t;
        break;
    case GLUT_KEY_LEFT  :
        rotateY_t -= angleInc_t;
        break;
    case GLUT_KEY_HOME  :
        resetView_t();
        break;
    case GLUT_KEY_F1    :
        glPolygonMode(GL_FRONT_AND_BACK, GL_FILL);
        break;
    case GLUT_KEY_F2    :
        glPolygonMode(GL_FRONT_AND_BACK, GL_LINE);
        break;
    }//*///
    glutPostRedisplay();
}



void subwinB_special(int key, int x, int y)
{//*//
    switch (key)
    {
    case GLUT_KEY_DOWN  :
        rotateX_b += angleInc_b;
        break;
    case GLUT_KEY_UP    :
        rotateX_b -= angleInc_b;
        break;
    case GLUT_KEY_RIGHT :
        rotateY_b += angleInc_b;
        break;
    case GLUT_KEY_LEFT  :
        rotateY_b -= angleInc_b;
        break;
    case GLUT_KEY_HOME  :
        resetView_b();
        break;
    case GLUT_KEY_F1    :
        glPolygonMode(GL_FRONT_AND_BACK, GL_FILL);
        break;
    case GLUT_KEY_F2    :
        glPolygonMode(GL_FRONT_AND_BACK, GL_LINE);
        break;
    }//*///
    glutPostRedisplay();
}




        void showFaces_t(int state = 0)
        {
            if(state == 0)
                displayVertices_t = true, displayFaces_t = false;
            else
                displayVertices_t = false, displayFaces_t = true;
            subwinT_cbState = state;
            gluiL->sync_live();

            glutSetWindow (subwinT); //target subwindow
            refreshDisplay();
        }

        void showFaces_b(int state = 0)
        {
            if(state == 0)
                displayVertices_b = true, displayFaces_b = false;
            else
                displayVertices_b = false, displayFaces_b = true;
            subwinB_cbState = state;
            gluiL->sync_live();

            glutSetWindow (subwinB); //target subwindow
            refreshDisplay();
        }



void subwinT_keyboard(unsigned char key, int x, int y) //glut callback keyboard
{
    switch (key)
    {
        case 's': axisornot_t += 1; //On or Off the axis
                  break;
        case 'x': transX_t +=0.005; break;
        case 'X': transX_t -=0.005; break;
        case 'y': transY_t +=0.005; break;
        case 'Y': transY_t -=0.005; break;
        case 'z': transZ_t +=0.005; break;
        case 'Z': transZ_t -=0.005; break;
        case 'v':
        case 'V': showFaces_t(0); break;
        case 'f':
        case 'F': showFaces_t(1); break;

    }

    glutPostRedisplay();
}


void subwinB_keyboard(unsigned char key, int x, int y) //glut callback keyboard
{//*
    switch (key)
    {
        case 's': axisornot_b += 1; //On or Off the axis
                  break;
        case 'x': transX_b +=0.005; break;
        case 'X': transX_b -=0.005; break;
        case 'y': transY_b +=0.005; break;
        case 'Y': transY_b -=0.005; break;
        case 'z': transZ_b +=0.005; break;
        case 'Z': transZ_b -=0.005; break;
        case 'v':
        case 'V': showFaces_b(0); break;
        case 'f':
        case 'F': showFaces_b(1); break;

    }//*/

    glutPostRedisplay();
}

void mainWindow_reshape(int width, int height)
{
    //int x = glutGet((GLenum)GLUT_WINDOW_X);
    //int y = glutGet((GLenum)GLUT_WINDOW_Y);
    WindowWidth  = width;
    WindowHeight = height;
    //glViewport(0, 0, width, height);
    glutReshapeWindow(1280,720);
    //glutPositionWindow(100,y);
}

void subwinT_motion(int x, int y)
{//*
    y = WindowHeight - y;
    if(mousePanMode_t)
    {
        posX_t += (x - mouseX_t)*0.005;
        posY_t += (y - mouseY_t)*0.005;
        mouseX_t = x;
        mouseY_t = y;
        glutPostRedisplay();
    }
    if(mouseZoomMode_t)
    {
        GLdouble inc = (mouseY_t - y)*0.005;
        scaleX_t += inc;
        scaleY_t += inc;
        scaleZ_t += inc;
        mouseY_t = y;
        glutPostRedisplay();
    }
    if(mouseRotationMode_t)
    {
        rotateX_t += (mouseY_t - y)*0.5;
        rotateY_t += (x - mouseX_t)*0.5;
        mouseX_t = x;
        mouseY_t = y;
        glutPostRedisplay();
    }
//*/
}

void subwinB_motion(int x, int y)
{//*
    y = WindowHeight - y;
    if(mousePanMode_b)
    {
        posX_b += (x - mouseX_b)*0.005;
        posY_b += (y - mouseY_b)*0.005;
        mouseX_b = x;
        mouseY_b = y;
        glutPostRedisplay();
    }
    if(mouseZoomMode_b)
    {
        GLdouble inc = (mouseY_b - y)*0.005;
        scaleX_b += inc;
        scaleY_b += inc;
        scaleZ_b += inc;
        mouseY_b = y;
        glutPostRedisplay();
    }
    if(mouseRotationMode_b)
    {
        rotateX_b += (mouseY_b - y)*0.5;
        rotateY_b += (x - mouseX_b)*0.5;
        mouseX_b = x;
        mouseY_b = y;
        glutPostRedisplay();
    }
//*/
}


void subwinT_mouse(int button, int state, int x, int y)
{
    y = WindowHeight - y;
    switch (button)
    {
    case GLUT_MIDDLE_BUTTON:
        if (state==GLUT_DOWN && !mousePanMode_t)
        {
            mouseX_t = x;
            mouseY_t = y;
            mousePanMode_t = true;
        }
        if (state==GLUT_UP &&  mousePanMode_t)
        {
            mousePanMode_t = false;
        }
        break;
    case GLUT_RIGHT_BUTTON:
        if (state==GLUT_DOWN && !mouseZoomMode_t)
        {
            mouseY_t = y;
            mouseZoomMode_t = true;
        }
        if (state==GLUT_UP && mouseZoomMode_t)
        {
            mouseZoomMode_t = false;
        }
        break;
    case GLUT_LEFT_BUTTON:
        if (state==GLUT_DOWN && !mouseRotationMode_t)
        {
            mouseX_t = x;
            mouseY_t = y;
            mouseRotationMode_t = true;
        }
        if (state==GLUT_UP &&  mouseRotationMode_t)
        {
            mouseRotationMode_t = false;
        }
        break;
    }
}

void subwinB_mouse(int button, int state, int x, int y)
{
    y = WindowHeight - y;
    switch (button)
    {
    case GLUT_MIDDLE_BUTTON:
        if (state==GLUT_DOWN && !mousePanMode_b)
        {
            mouseX_b = x;
            mouseY_b = y;
            mousePanMode_b = true;
        }
        if (state==GLUT_UP &&  mousePanMode_b)
        {
            mousePanMode_b = false;
        }
        break;
    case GLUT_RIGHT_BUTTON:
        if (state==GLUT_DOWN && !mouseZoomMode_b)
        {
            mouseY_b = y;
            mouseZoomMode_b = true;
        }
        if (state==GLUT_UP && mouseZoomMode_b)
        {
            mouseZoomMode_b = false;
        }
        break;
    case GLUT_LEFT_BUTTON:
        if (state==GLUT_DOWN && !mouseRotationMode_b)
        {
            mouseX_b = x;
            mouseY_b = y;
            mouseRotationMode_b = true;
        }
        if (state==GLUT_UP &&  mouseRotationMode_b)
        {
            mouseRotationMode_b = false;
        }
        break;
    }
}


void myGlutIdle(void)
{
    glutSetWindow(main_window);
    glutPostRedisplay();
}






void switchModel_t(int model_idx)
{
    string skeleton_filename;
    string points_filename;

    switch(model_idx)
    {
        case 0:
            {
                points_filename = "data/hand.ply";
                skeleton_filename = "data/hand.skel";
                eyeX_t=0, eyeY_t=0, eyeZ_t=1.5, focusX_t=0, focusY_t=0, focusZ_t=0, upX_t=0, upY_t=1, upZ_t=0;
                fileName_t = "Hand";
                break;
            }
        case 1:
            {
                points_filename = "data/CrookedHand.ply";
                skeleton_filename = "data/CrookedHand.skel";
                eyeX_t=0, eyeY_t=0, eyeZ_t=1.5, focusX_t=0, focusY_t=0, focusZ_t=0, upX_t=0, upY_t=1, upZ_t=0;
                fileName_t = "Crooked Hand";
                break;
            }
    }
    cout << "Switched model to " << points_filename << endl;
    cout << "Display skeleton of " << skeleton_filename << endl;
    //*

    model1.read3DModel(points_filename.c_str());
    model1.read3DSkeleton(skeleton_filename.c_str());

    ostringstream sstream;
    sstream << model1.noOfVertices << " surface vertices";
    surfVert_t = sstream.str();
    sstream.str("");
    sstream.clear();
    sstream << model1.noOfFaces << " faces";
    face_t = sstream.str();
    sstream.str("");
    sstream.clear();
    sstream << model1.countSV << " skeleton vertices";
    skelVert_t = sstream.str();
    sstream.str("");
    sstream.clear();
    sstream << model1.countSE << " skeleton edges";
    skelEdge_t = sstream.str();
}

void switchModel_b(int model_idx)
{
    string skeleton_filename;
    string points_filename;

    switch(model_idx)
    {
        case 0:
            {

                points_filename = "data/hand.ply";
                skeleton_filename = "data/hand.skel";
                eyeX_b=0, eyeY_b=0, eyeZ_b=1.5, focusX_b=0, focusY_b=0, focusZ_b=0, upX_b=0, upY_b=1, upZ_b=0;
                fileName_b = "Hand";
                break;
            }
        case 1:
            {

                points_filename = "data/CrookedHand.ply";
                skeleton_filename = "data/CrookedHand.skel";
                eyeX_b=0, eyeY_b=0, eyeZ_b=1.5, focusX_b=0, focusY_b=0, focusZ_b=0, upX_b=0, upY_b=1, upZ_b=0;
                fileName_b = "Crooked Hand";
                break;
            }
    }
    cout << "Switched model to " << points_filename << endl;
    cout << "Display skeleton of " << skeleton_filename << endl;
    //*

    model2.read3DModel(points_filename.c_str());
    model2.read3DSkeleton(skeleton_filename.c_str());

    ostringstream sstream;
    sstream << model2.noOfVertices << " surface vertices";
    surfVert_b = sstream.str();
    sstream.str("");
    sstream.clear();
    sstream << model2.noOfFaces << " faces";
    face_b = sstream.str();
    sstream.str("");
    sstream.clear();
    sstream << model2.countSV << " skeleton vertices";
    skelVert_b = sstream.str();
    sstream.str("");
    sstream.clear();
    sstream << model2.countSE << " skeleton edges";
    skelEdge_b = sstream.str();
}



void init_t(int model_idx)
{
    switchModel_t(model_idx);
    InitTransparent();
        viewing_t();
    glHint( GL_PERSPECTIVE_CORRECTION_HINT, GL_NICEST );
    glEnable(GL_NORMALIZE);
    glClearColor(1.0,1.0,1.0, 1.0);

    glEnable(GL_CULL_FACE);
    glEnable(GL_DEPTH_TEST);

    refreshDisplay();
}

void init_b(int model_idx)
{
    switchModel_b(model_idx);
    InitTransparent();
        viewing_b();
    glHint( GL_PERSPECTIVE_CORRECTION_HINT, GL_NICEST );
    glEnable(GL_NORMALIZE);
    glClearColor(1.0,1.0,1.0, 1.0);

    glEnable(GL_CULL_FACE);
    glEnable(GL_DEPTH_TEST);

    refreshDisplay();
}





///////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////

void mainWindow_display(void)
{
    glClearColor(0.8, 0.8, 0.8, 1.0);
    glClear(GL_COLOR_BUFFER_BIT);
    glutSwapBuffers ();
}




void subwindowL_display (void)
{
	glClearColor(0.8, 0.8, 0.8, 1.0); //hide subwindow for aesthetic purposes
    glClear(GL_COLOR_BUFFER_BIT);
	glutSwapBuffers ();
}







void subwindowR_display (void)
{
	printf ("Drawing SubWindow R contents.\n");

	glClearColor(1.0, 1.0, 1.0, 1.0);
    glClear(GL_COLOR_BUFFER_BIT);

    glColor3f (0.5, 0.5, 0.5);

	//glutWireTeapot (0.5);

	glutSwapBuffers ();
}










///////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////


void createGlutMainWindow()
{
    glutInitDisplayMode( GLUT_RGBA | GLUT_DOUBLE | GLUT_DEPTH );
    glutInitWindowPosition(100, 100); // Set top-left position
    glutInitWindowSize(WindowWidth, WindowHeight); //Set width and height
    main_window = glutCreateWindow("3D Blending Prototype");// Create display window

    glutDisplayFunc(mainWindow_display);  // Specify the display callback function
    glutReshapeFunc(mainWindow_reshape);
}

void createGlutSubwinT()
{
    subwinT = glutCreateSubWindow(main_window,230,20,330,330);
    glutDisplayFunc (subwinT_display);
	glutMouseFunc (subwinT_mouse);
	glutMotionFunc (subwinT_motion);
	glutKeyboardFunc (subwinT_keyboard);
	glutSpecialFunc(subwinT_special);
	init_t(0);
}

void createGlutSubwinB()
{
    subwinB = glutCreateSubWindow(main_window,230,370,330,330);
    glutDisplayFunc (subwinB_display);
	glutMouseFunc (subwinB_mouse);
	glutMotionFunc (subwinB_motion);
	glutKeyboardFunc (subwinB_keyboard);
	glutSpecialFunc(subwinB_special);
	init_b(1);
}

void createGlutSubwinR()
{
    subwinR = glutCreateSubWindow(main_window,580,20,680,680);
    glutDisplayFunc (subwindowR_display);
}

void createGlutSubwinL()
{
    subwinL = glutCreateSubWindow(main_window,20,20,190,680);
    glutDisplayFunc (subwindowL_display);

}

void createGluiSubwinT()
{
    gluiT = GLUI_Master.create_glui_subwindow( subwinT, GLUI_SUBWINDOW_TOP );
    new GLUI_StaticText (gluiT, "Model 1");
    gluiT->set_main_gfx_window( main_window );
}
void createGluiSubwinB()
{
    gluiB = GLUI_Master.create_glui_subwindow( subwinB, GLUI_SUBWINDOW_TOP );
    new GLUI_StaticText (gluiB, "Model 2");
    gluiB->set_main_gfx_window( main_window );
}

void createGluiSubwinR()
{
    gluiR = GLUI_Master.create_glui_subwindow( subwinR, GLUI_SUBWINDOW_TOP );
    new GLUI_StaticText (gluiR, "Blended model");
    gluiR->set_main_gfx_window( main_window );
}

void createGluiSubwinL()
{
    gluiL = GLUI_Master.create_glui_subwindow( subwinL, GLUI_SUBWINDOW_TOP );
    new GLUI_StaticText(gluiL, "3D Blending");
    gluiL->add_separator();
    //////////////////////////////////////
    //////////////////////////////////////
    //////////////////////////////////////
    GLUI_Listbox *listboxL = gluiL->add_listbox("Model pairs: ",&modelPair_lbID,
                                                MODEL_PAIR_LB,gluiComponentCallback);
    listboxL->add_item(0, "Hands");
    listboxL->add_item(1, "Demo");
    gluiL->add_separator();
    //////////////////////////////////////
    //////////////////////////////////////
    //////////////////////////////////////
    new GLUI_StaticText(gluiL, "View controls:");
    new GLUI_StaticText(gluiL, "Left mouse drag to rotate.");
    new GLUI_StaticText(gluiL, "Right mouse drag to zoom.");
    new GLUI_StaticText(gluiL, "Middle mouse drag to pan.");
    gluiL->add_separator();
    //////////////////////////////////////
    //////////////////////////////////////
    //////////////////////////////////////
    new GLUI_StaticText(gluiL, "Model 1:");
    fileNameT_txt = gluiL->add_statictext(fileName_t.c_str());
    surfVertT_txt = gluiL->add_statictext(surfVert_t.c_str());
    faceT_txt = gluiL->add_statictext(face_t.c_str());
    skelVertT_txt = gluiL->add_statictext(skelVert_t.c_str());
    skelEdgeT_txt = gluiL->add_statictext(skelEdge_t.c_str());
    GLUI_Checkbox *checkT = gluiL->add_checkbox("Show faces ",&subwinT_cbState,
                                                SUBWIN_T_FACE_CB,gluiComponentCallback);
    GLUI_Button *btnResetViewT = gluiL->add_button("Reset view",
                                                   SUBWIN_T_RESET_BTN, gluiComponentCallback);
    btnResetViewT->set_alignment(GLUI_ALIGN_LEFT);
    gluiL->add_separator();
    //////////////////////////////////////
    //////////////////////////////////////
    //////////////////////////////////////
    new GLUI_StaticText(gluiL, "Model 2:");
    fileNameB_txt = gluiL->add_statictext(fileName_b.c_str());
    surfVertB_txt = gluiL->add_statictext(surfVert_b.c_str());
    faceB_txt = gluiL->add_statictext(face_b.c_str());
    skelVertB_txt = gluiL->add_statictext(skelVert_b.c_str());
    skelEdgeB_txt = gluiL->add_statictext(skelEdge_b.c_str());
    GLUI_Checkbox *checkB = gluiL->add_checkbox("Show faces ",&subwinB_cbState,
                                                SUBWIN_B_FACE_CB,gluiComponentCallback);
    GLUI_Button *btnResetViewB = gluiL->add_button("Reset view",
                                                   SUBWIN_B_RESET_BTN, gluiComponentCallback);
    btnResetViewB->set_alignment(GLUI_ALIGN_LEFT);
    gluiL->add_separator();
    new GLUI_StaticText(gluiL, "Blended model:");
    new GLUI_StaticText(gluiL, "(input_file_name)");
    new GLUI_StaticText(gluiL, "### surface vertices");
    new GLUI_StaticText(gluiL, "### faces");
    new GLUI_StaticText(gluiL, "### skeleton vertices");
    new GLUI_StaticText(gluiL, "### skeleton edges");
    GLUI_Checkbox *checkR = gluiL->add_checkbox("Show faces ");
    GLUI_Button *btnResetViewR = gluiL->add_button("Reset view");
    btnResetViewR->set_alignment(GLUI_ALIGN_LEFT);
    gluiL->add_separator();
    new GLUI_StaticText(gluiL, "");
    new GLUI_StaticText(gluiL, "");
    new GLUI_StaticText(gluiL, "");
    new GLUI_StaticText(gluiL, "");
    GLUI_Button *quit_btn =  gluiL->add_button( "Quit", 0,(GLUI_Update_CB)exit );
    quit_btn->set_alignment(GLUI_ALIGN_LEFT);

    GLUI_Master.set_glutIdleFunc( NULL );
    gluiL->set_main_gfx_window( main_window );
}



void gluiComponentCallback(int component_id)
{
    switch(component_id)
    {
        //btns
        case SUBWIN_T_RESET_BTN:
        {
            resetView_t();
            break;
        }
        case SUBWIN_B_RESET_BTN:
        {
            resetView_b();
            break;
        }

        //checkboxes
        case SUBWIN_T_FACE_CB:
        {
            showFaces_t(subwinT_cbState);
            break;
        }
        case SUBWIN_B_FACE_CB:
        {
            showFaces_b(subwinB_cbState);
            break;
        }
        case SUBWIN_R_FACE_CB:
        {
            break;
        }

        //listbox
        case MODEL_PAIR_LB:
        {/*//
            switch(modelPair_lbID)
            {
                case 0:
                {
                    switchModel_t(0);
                    switchModel_b(1);
                    gluiL->close();
                    redisplay_all();
                }
                case 1:
                {
                    switchModel_t(1);
                    switchModel_b(0);
                    createGluiSubwinL();
                    redisplay_all();
                }
            }
            break;
            //*///
        }
    }
}



int main(int argc, char **argv)
{
    glutInit(&argc, argv);

    createGlutMainWindow(); //main window

    createGlutSubwinT(); //subwindow top, model 1
    createGlutSubwinB(); //subwindow bottom, model 2
    createGlutSubwinR(); //subwindow right, blended model
    createGlutSubwinL(); //subwindow left, UI controls

    createGluiSubwinT(); //label for subwindow top
    createGluiSubwinB(); //label for subwindow bottom
    createGluiSubwinR(); //label for subwindow right
    createGluiSubwinL(); //ui controls in subwindow left

    glutMainLoop();
    return 0;
}














